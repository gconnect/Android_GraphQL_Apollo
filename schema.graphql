# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"An object with an ID"
interface Node {
    "The id of the object."
    id: ID!
}

type File implements Node {
    contentType: String!
    createdAt: DateTime!
    id: ID!
    name: String!
    secret: String!
    size: Int!
    updatedAt: DateTime!
    url: String!
}

type FilePreviousValues {
    contentType: String!
    createdAt: DateTime!
    id: ID!
    name: String!
    secret: String!
    size: Int!
    updatedAt: DateTime!
    url: String!
}

type FileSubscriptionPayload {
    mutation: _ModelMutationType!
    node: File
    previousValues: FilePreviousValues
    updatedFields: [String!]
}

type InvokeFunctionPayload {
    clientMutationId: String
    result: String!
}

type Mutation {
    createFile(name: String!): File
    createPost(author: String!, description: String!, title: String!): Post
    createUser: User
    deleteFile(id: ID!): File
    deletePost(id: ID!): Post
    deleteUser(id: ID!): User
    invokeFunction(input: InvokeFunctionInput!): InvokeFunctionPayload
    updateFile(id: ID!, name: String): File
    updateOrCreateFile(create: CreateFile!, update: UpdateFile!): File
    updateOrCreatePost(create: CreatePost!, update: UpdatePost!): Post
    updateOrCreateUser(update: UpdateUser!): User
    updatePost(author: String, description: String, id: ID!, title: String): Post
    updateUser(id: ID!): User
}

type Post implements Node {
    author: String!
    description: String!
    id: ID!
    title: String!
}

type PostPreviousValues {
    author: String!
    description: String!
    id: ID!
    title: String!
}

type PostSubscriptionPayload {
    mutation: _ModelMutationType!
    node: Post
    previousValues: PostPreviousValues
    updatedFields: [String!]
}

type Query {
    File(id: ID, secret: String, url: String): File
    Post(id: ID): Post
    User(id: ID): User
    _allFilesMeta(after: String, before: String, filter: FileFilter, first: Int, last: Int, orderBy: FileOrderBy, skip: Int): _QueryMeta!
    _allPostsMeta(after: String, before: String, filter: PostFilter, first: Int, last: Int, orderBy: PostOrderBy, skip: Int): _QueryMeta!
    _allUsersMeta(after: String, before: String, filter: UserFilter, first: Int, last: Int, orderBy: UserOrderBy, skip: Int): _QueryMeta!
    allFiles(after: String, before: String, filter: FileFilter, first: Int, last: Int, orderBy: FileOrderBy, skip: Int): [File!]!
    allPosts(after: String, before: String, filter: PostFilter, first: Int, last: Int, orderBy: PostOrderBy, skip: Int): [Post!]!
    allUsers(after: String, before: String, filter: UserFilter, first: Int, last: Int, orderBy: UserOrderBy, skip: Int): [User!]!
    "Fetches an object given its ID"
    node(
        #The ID of an object
        id: ID!
    ): Node
    user: User
}

type Subscription {
    File(filter: FileSubscriptionFilter): FileSubscriptionPayload
    Post(filter: PostSubscriptionFilter): PostSubscriptionPayload
    User(filter: UserSubscriptionFilter): UserSubscriptionPayload
}

type User implements Node {
    createdAt: DateTime!
    id: ID!
    updatedAt: DateTime!
}

type UserPreviousValues {
    createdAt: DateTime!
    id: ID!
    updatedAt: DateTime!
}

type UserSubscriptionPayload {
    mutation: _ModelMutationType!
    node: User
    previousValues: UserPreviousValues
    updatedFields: [String!]
}

"Meta information about the query."
type _QueryMeta {
    count: Int!
}

enum FileOrderBy {
    contentType_ASC
    contentType_DESC
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    secret_ASC
    secret_DESC
    size_ASC
    size_DESC
    updatedAt_ASC
    updatedAt_DESC
    url_ASC
    url_DESC
}

enum PostOrderBy {
    author_ASC
    author_DESC
    description_ASC
    description_DESC
    id_ASC
    id_DESC
    title_ASC
    title_DESC
}

enum UserOrderBy {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum _ModelMutationType {
    CREATED
    DELETED
    UPDATED
}

input CreateFile {
    name: String!
}

input CreatePost {
    author: String!
    description: String!
    title: String!
}

input FileFilter {
    "Logical AND on all given filters."
    AND: [FileFilter!]
    "Logical OR on all given filters."
    OR: [FileFilter!]
    contentType: String
    "All values containing the given string."
    contentType_contains: String
    "All values ending with the given string."
    contentType_ends_with: String
    "All values greater than the given value."
    contentType_gt: String
    "All values greater than or equal the given value."
    contentType_gte: String
    "All values that are contained in given list."
    contentType_in: [String!]
    "All values less than the given value."
    contentType_lt: String
    "All values less than or equal the given value."
    contentType_lte: String
    "All values that are not equal to given value."
    contentType_not: String
    "All values not containing the given string."
    contentType_not_contains: String
    "All values not ending with the given string."
    contentType_not_ends_with: String
    "All values that are not contained in given list."
    contentType_not_in: [String!]
    "All values not starting with the given string."
    contentType_not_starts_with: String
    "All values starting with the given string."
    contentType_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    secret: String
    "All values containing the given string."
    secret_contains: String
    "All values ending with the given string."
    secret_ends_with: String
    "All values greater than the given value."
    secret_gt: String
    "All values greater than or equal the given value."
    secret_gte: String
    "All values that are contained in given list."
    secret_in: [String!]
    "All values less than the given value."
    secret_lt: String
    "All values less than or equal the given value."
    secret_lte: String
    "All values that are not equal to given value."
    secret_not: String
    "All values not containing the given string."
    secret_not_contains: String
    "All values not ending with the given string."
    secret_not_ends_with: String
    "All values that are not contained in given list."
    secret_not_in: [String!]
    "All values not starting with the given string."
    secret_not_starts_with: String
    "All values starting with the given string."
    secret_starts_with: String
    size: Int
    "All values greater than the given value."
    size_gt: Int
    "All values greater than or equal the given value."
    size_gte: Int
    "All values that are contained in given list."
    size_in: [Int!]
    "All values less than the given value."
    size_lt: Int
    "All values less than or equal the given value."
    size_lte: Int
    "All values that are not equal to given value."
    size_not: Int
    "All values that are not contained in given list."
    size_not_in: [Int!]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
    url: String
    "All values containing the given string."
    url_contains: String
    "All values ending with the given string."
    url_ends_with: String
    "All values greater than the given value."
    url_gt: String
    "All values greater than or equal the given value."
    url_gte: String
    "All values that are contained in given list."
    url_in: [String!]
    "All values less than the given value."
    url_lt: String
    "All values less than or equal the given value."
    url_lte: String
    "All values that are not equal to given value."
    url_not: String
    "All values not containing the given string."
    url_not_contains: String
    "All values not ending with the given string."
    url_not_ends_with: String
    "All values that are not contained in given list."
    url_not_in: [String!]
    "All values not starting with the given string."
    url_not_starts_with: String
    "All values starting with the given string."
    url_starts_with: String
}

input FileSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [FileSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [FileSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: FileSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input FileSubscriptionFilterNode {
    contentType: String
    "All values containing the given string."
    contentType_contains: String
    "All values ending with the given string."
    contentType_ends_with: String
    "All values greater than the given value."
    contentType_gt: String
    "All values greater than or equal the given value."
    contentType_gte: String
    "All values that are contained in given list."
    contentType_in: [String!]
    "All values less than the given value."
    contentType_lt: String
    "All values less than or equal the given value."
    contentType_lte: String
    "All values that are not equal to given value."
    contentType_not: String
    "All values not containing the given string."
    contentType_not_contains: String
    "All values not ending with the given string."
    contentType_not_ends_with: String
    "All values that are not contained in given list."
    contentType_not_in: [String!]
    "All values not starting with the given string."
    contentType_not_starts_with: String
    "All values starting with the given string."
    contentType_starts_with: String
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    name: String
    "All values containing the given string."
    name_contains: String
    "All values ending with the given string."
    name_ends_with: String
    "All values greater than the given value."
    name_gt: String
    "All values greater than or equal the given value."
    name_gte: String
    "All values that are contained in given list."
    name_in: [String!]
    "All values less than the given value."
    name_lt: String
    "All values less than or equal the given value."
    name_lte: String
    "All values that are not equal to given value."
    name_not: String
    "All values not containing the given string."
    name_not_contains: String
    "All values not ending with the given string."
    name_not_ends_with: String
    "All values that are not contained in given list."
    name_not_in: [String!]
    "All values not starting with the given string."
    name_not_starts_with: String
    "All values starting with the given string."
    name_starts_with: String
    secret: String
    "All values containing the given string."
    secret_contains: String
    "All values ending with the given string."
    secret_ends_with: String
    "All values greater than the given value."
    secret_gt: String
    "All values greater than or equal the given value."
    secret_gte: String
    "All values that are contained in given list."
    secret_in: [String!]
    "All values less than the given value."
    secret_lt: String
    "All values less than or equal the given value."
    secret_lte: String
    "All values that are not equal to given value."
    secret_not: String
    "All values not containing the given string."
    secret_not_contains: String
    "All values not ending with the given string."
    secret_not_ends_with: String
    "All values that are not contained in given list."
    secret_not_in: [String!]
    "All values not starting with the given string."
    secret_not_starts_with: String
    "All values starting with the given string."
    secret_starts_with: String
    size: Int
    "All values greater than the given value."
    size_gt: Int
    "All values greater than or equal the given value."
    size_gte: Int
    "All values that are contained in given list."
    size_in: [Int!]
    "All values less than the given value."
    size_lt: Int
    "All values less than or equal the given value."
    size_lte: Int
    "All values that are not equal to given value."
    size_not: Int
    "All values that are not contained in given list."
    size_not_in: [Int!]
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
    url: String
    "All values containing the given string."
    url_contains: String
    "All values ending with the given string."
    url_ends_with: String
    "All values greater than the given value."
    url_gt: String
    "All values greater than or equal the given value."
    url_gte: String
    "All values that are contained in given list."
    url_in: [String!]
    "All values less than the given value."
    url_lt: String
    "All values less than or equal the given value."
    url_lte: String
    "All values that are not equal to given value."
    url_not: String
    "All values not containing the given string."
    url_not_contains: String
    "All values not ending with the given string."
    url_not_ends_with: String
    "All values that are not contained in given list."
    url_not_in: [String!]
    "All values not starting with the given string."
    url_not_starts_with: String
    "All values starting with the given string."
    url_starts_with: String
}

input InvokeFunctionInput {
    clientMutationId: String
    input: String!
    name: String!
}

input PostFilter {
    "Logical AND on all given filters."
    AND: [PostFilter!]
    "Logical OR on all given filters."
    OR: [PostFilter!]
    author: String
    "All values containing the given string."
    author_contains: String
    "All values ending with the given string."
    author_ends_with: String
    "All values greater than the given value."
    author_gt: String
    "All values greater than or equal the given value."
    author_gte: String
    "All values that are contained in given list."
    author_in: [String!]
    "All values less than the given value."
    author_lt: String
    "All values less than or equal the given value."
    author_lte: String
    "All values that are not equal to given value."
    author_not: String
    "All values not containing the given string."
    author_not_contains: String
    "All values not ending with the given string."
    author_not_ends_with: String
    "All values that are not contained in given list."
    author_not_in: [String!]
    "All values not starting with the given string."
    author_not_starts_with: String
    "All values starting with the given string."
    author_starts_with: String
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values greater than the given value."
    description_gt: String
    "All values greater than or equal the given value."
    description_gte: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values less than the given value."
    description_lt: String
    "All values less than or equal the given value."
    description_lte: String
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string."
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values greater than the given value."
    title_gt: String
    "All values greater than or equal the given value."
    title_gte: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values less than the given value."
    title_lt: String
    "All values less than or equal the given value."
    title_lte: String
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string."
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
}

input PostSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [PostSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [PostSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: PostSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input PostSubscriptionFilterNode {
    author: String
    "All values containing the given string."
    author_contains: String
    "All values ending with the given string."
    author_ends_with: String
    "All values greater than the given value."
    author_gt: String
    "All values greater than or equal the given value."
    author_gte: String
    "All values that are contained in given list."
    author_in: [String!]
    "All values less than the given value."
    author_lt: String
    "All values less than or equal the given value."
    author_lte: String
    "All values that are not equal to given value."
    author_not: String
    "All values not containing the given string."
    author_not_contains: String
    "All values not ending with the given string."
    author_not_ends_with: String
    "All values that are not contained in given list."
    author_not_in: [String!]
    "All values not starting with the given string."
    author_not_starts_with: String
    "All values starting with the given string."
    author_starts_with: String
    description: String
    "All values containing the given string."
    description_contains: String
    "All values ending with the given string."
    description_ends_with: String
    "All values greater than the given value."
    description_gt: String
    "All values greater than or equal the given value."
    description_gte: String
    "All values that are contained in given list."
    description_in: [String!]
    "All values less than the given value."
    description_lt: String
    "All values less than or equal the given value."
    description_lte: String
    "All values that are not equal to given value."
    description_not: String
    "All values not containing the given string."
    description_not_contains: String
    "All values not ending with the given string."
    description_not_ends_with: String
    "All values that are not contained in given list."
    description_not_in: [String!]
    "All values not starting with the given string."
    description_not_starts_with: String
    "All values starting with the given string."
    description_starts_with: String
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    title: String
    "All values containing the given string."
    title_contains: String
    "All values ending with the given string."
    title_ends_with: String
    "All values greater than the given value."
    title_gt: String
    "All values greater than or equal the given value."
    title_gte: String
    "All values that are contained in given list."
    title_in: [String!]
    "All values less than the given value."
    title_lt: String
    "All values less than or equal the given value."
    title_lte: String
    "All values that are not equal to given value."
    title_not: String
    "All values not containing the given string."
    title_not_contains: String
    "All values not ending with the given string."
    title_not_ends_with: String
    "All values that are not contained in given list."
    title_not_in: [String!]
    "All values not starting with the given string."
    title_not_starts_with: String
    "All values starting with the given string."
    title_starts_with: String
}

input UpdateFile {
    id: ID!
    name: String
}

input UpdatePost {
    author: String
    description: String
    id: ID!
    title: String
}

input UpdateUser {
    id: ID!
}

input UserFilter {
    "Logical AND on all given filters."
    AND: [UserFilter!]
    "Logical OR on all given filters."
    OR: [UserFilter!]
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}

input UserSubscriptionFilter {
    "Logical AND on all given filters."
    AND: [UserSubscriptionFilter!]
    "Logical OR on all given filters."
    OR: [UserSubscriptionFilter!]
    "The subscription event gets dispatched when it's listed in mutation_in"
    mutation_in: [_ModelMutationType!]
    node: UserSubscriptionFilterNode
    "The subscription event gets only dispatched when one of the updated fields names is included in this list"
    updatedFields_contains: String
    "The subscription event gets only dispatched when all of the field names included in this list have been updated"
    updatedFields_contains_every: [String!]
    "The subscription event gets only dispatched when some of the field names included in this list have been updated"
    updatedFields_contains_some: [String!]
}

input UserSubscriptionFilterNode {
    createdAt: DateTime
    "All values greater than the given value."
    createdAt_gt: DateTime
    "All values greater than or equal the given value."
    createdAt_gte: DateTime
    "All values that are contained in given list."
    createdAt_in: [DateTime!]
    "All values less than the given value."
    createdAt_lt: DateTime
    "All values less than or equal the given value."
    createdAt_lte: DateTime
    "All values that are not equal to given value."
    createdAt_not: DateTime
    "All values that are not contained in given list."
    createdAt_not_in: [DateTime!]
    id: ID
    "All values containing the given string."
    id_contains: ID
    "All values ending with the given string."
    id_ends_with: ID
    "All values greater than the given value."
    id_gt: ID
    "All values greater than or equal the given value."
    id_gte: ID
    "All values that are contained in given list."
    id_in: [ID!]
    "All values less than the given value."
    id_lt: ID
    "All values less than or equal the given value."
    id_lte: ID
    "All values that are not equal to given value."
    id_not: ID
    "All values not containing the given string."
    id_not_contains: ID
    "All values not ending with the given string."
    id_not_ends_with: ID
    "All values that are not contained in given list."
    id_not_in: [ID!]
    "All values not starting with the given string."
    id_not_starts_with: ID
    "All values starting with the given string."
    id_starts_with: ID
    updatedAt: DateTime
    "All values greater than the given value."
    updatedAt_gt: DateTime
    "All values greater than or equal the given value."
    updatedAt_gte: DateTime
    "All values that are contained in given list."
    updatedAt_in: [DateTime!]
    "All values less than the given value."
    updatedAt_lt: DateTime
    "All values less than or equal the given value."
    updatedAt_lte: DateTime
    "All values that are not equal to given value."
    updatedAt_not: DateTime
    "All values that are not contained in given list."
    updatedAt_not_in: [DateTime!]
}


scalar DateTime